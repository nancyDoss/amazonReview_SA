# -*- coding: utf-8 -*-
"""run.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ISb4oD3vHtRPu_hWOVBEXvd_FYRure3Y
"""

!pip install flask-ngrok

import json
import plotly
import pandas as pd

from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize

from flask import Flask
from flask import render_template, request, jsonify
from plotly.graph_objs import Bar
import joblib
from sqlalchemy import create_engine


app = Flask(__name__)

def tokenize(text):
    """
    This function performs NLP. tokenizing data
    param: text
    
    return:cleaned token
    """
    tokens = word_tokenize(text)
    lemmatizer = WordNetLemmatizer()

    clean_tokens = []
    for tok in tokens:
        clean_tok = lemmatizer.lemmatize(tok).lower().strip()
        clean_tokens.append(clean_tok)

    return clean_tokens

# load data
#engine = create_engine('sqlite:/// {}'.format('DisasterResponse.db'))
engine = create_engine('sqlite:///./content/drive/MyDrive/Colab_Notebooks/AmaxonFoodReview.db')
df = pd.read_sql_table('DisasterResponse', con=engine)

# load model
model = joblib.load("./content/drive/MyDrive/Colab_Notebooks/lstmModel.pkl")


# index webpage displays cool visuals and receives user input text for model
@app.route('/')
@app.route('/index')

# web page that handles user query and displays model results
@app.route('/go')
def go():
    # save user input in query
    query = request.args.get('query', '') 

    # use model to predict classification for query
    classification_labels = model.predict([query])[0]
    classification_results = dict(zip(df.columns[4:], classification_labels))

    # This will render the go.html Please see that file. 
    return render_template(
        'go.html',
        query=query,
        classification_result=classification_results
    )


def main():
    app.run(host='0.0.0.0', port=3001, debug=True)


if __name__ == '__main__':
    main()